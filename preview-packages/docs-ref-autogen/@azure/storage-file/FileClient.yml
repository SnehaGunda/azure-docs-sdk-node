### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file.FileClient'
    name: FileClient
    fullName: FileClient
    children:
      - '@azure/storage-file.FileClient.abortCopyFromURL'
      - '@azure/storage-file.FileClient.clearRange'
      - '@azure/storage-file.FileClient.create'
      - '@azure/storage-file.FileClient.delete'
      - '@azure/storage-file.FileClient.download'
      - '@azure/storage-file.FileClient.downloadToBuffer'
      - '@azure/storage-file.FileClient.downloadToFile'
      - '@azure/storage-file.FileClient.constructor'
      - '@azure/storage-file.FileClient.constructor_1'
      - '@azure/storage-file.FileClient.getProperties'
      - '@azure/storage-file.FileClient.getRangeList'
      - '@azure/storage-file.FileClient.resize'
      - '@azure/storage-file.FileClient.setHTTPHeaders'
      - '@azure/storage-file.FileClient.setMetadata'
      - '@azure/storage-file.FileClient.startCopyFromURL'
      - '@azure/storage-file.FileClient.uploadBrowserData'
      - '@azure/storage-file.FileClient.uploadFile'
      - '@azure/storage-file.FileClient.uploadRange'
      - '@azure/storage-file.FileClient.uploadResetableStream'
      - '@azure/storage-file.FileClient.UploadSeekableBlob'
      - '@azure/storage-file.FileClient.uploadStream'
      - '@azure/storage-file.FileClient.url'
    langs:
      - typeScript
    type: class
    summary: A FileClient represents a URL to an Azure Storage file.
    extends:
      name: '@azure/storage-file.StorageClient'
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.abortCopyFromURL'
    name: 'abortCopyFromURL(string, FileAbortCopyFromURLOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Aborts a pending Copy File operation, and leaves a destination file with
      zero length and full

      metadata.
    syntax:
      content: >-
        function abortCopyFromURL(copyId: string, options?:
        FileAbortCopyFromURLOptions)
      parameters:
        - id: copyId
          type:
            - string
          description: Id of the Copy File operation to abort.
        - id: options
          type:
            - '@azure/storage-file.FileAbortCopyFromURLOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileAbortCopyResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.clearRange'
    name: 'clearRange(number, number, FileClearRangeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Clears the specified range and
      releases the space used in storage for that range.
    syntax:
      content: >-
        function clearRange(offset: number, contentLength: number, options?:
        FileClearRangeOptions)
      parameters:
        - id: offset
          type:
            - number
          description: ''
        - id: contentLength
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-file.FileClearRangeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileUploadRangeResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.create'
    name: 'create(number, FileCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file. Note it only initializes the file
      with no content.
    syntax:
      content: 'function create(size: number, options?: FileCreateOptions)'
      parameters:
        - id: size
          type:
            - number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type:
            - '@azure/storage-file.FileCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.delete'
    name: delete(FileDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the file from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function delete(options?: FileDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.FileDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.download'
    name: 'download(undefined | number, undefined | number, FileDownloadOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Reads or downloads a file from the system, including its metadata and
      properties.

      * In Node.js, data returns in a Readable stream `readableStreamBody`

      * In browsers, data returns in a promise `blobBody`
    syntax:
      content: >-
        function download(offset?: undefined | number, count?: undefined |
        number, options?: FileDownloadOptions)
      parameters:
        - id: offset
          type:
            - undefined | number
          description: ''
          optional: true
        - id: count
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.FileDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDownloadResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.downloadToBuffer'
    name: >-
      downloadToBuffer(Buffer, number, undefined | number,
      DownloadFromAzureFileOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure file in parallel to a buffer.

      Offset and count are optional, pass 0 for both to download the entire
      file.
    syntax:
      content: >-
        function downloadToBuffer(buffer: Buffer, offset: number, count?:
        undefined | number, options?: DownloadFromAzureFileOptions)
      parameters:
        - id: buffer
          type:
            - Buffer
          description: 'Buffer to be fill, must have length larger than count'
        - id: offset
          type:
            - number
          description: From which position of the Azure File to download
        - id: count
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.DownloadFromAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.downloadToFile'
    name: >-
      downloadToFile(string, undefined | number, undefined | number,
      FileDownloadOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Downloads an Azure Blob to a local file.

      Fails if the the given file path already exits.

      Offset and count are optional, pass 0 and undefined respectively to
      download the entire blob.
    syntax:
      content: >-
        function downloadToFile(filePath: string, offset?: undefined | number,
        count?: undefined | number, options?: FileDownloadOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: ''
        - id: offset
          type:
            - undefined | number
          description: ''
          optional: true
        - id: count
          type:
            - undefined | number
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.FileDownloadOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDownloadResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.constructor'
    name: 'FileClient(string, Credential, NewPipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of FileClient.
    syntax:
      content: >-
        new FileClient(url: string, credential?: Credential, options?:
        NewPipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: credential
          type:
            - '@azure/storage-file.Credential'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.NewPipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.constructor_1'
    name: 'FileClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of FileClient.
    syntax:
      content: 'new FileClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory/file?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a file.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a file or directory name includes %, file or directory name must be encoded in the URL.
                                Such as a file named "myfile%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydirectory/myfile%25".
        - id: pipeline
          type:
            - '@azure/storage-file.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.getProperties'
    name: getProperties(FileGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all user-defined metadata, standard HTTP properties, and system
      properties

      for the file. It does not return the content of the file.
    syntax:
      content: 'function getProperties(options?: FileGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.FileGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.getRangeList'
    name: getRangeList(FileGetRangeListOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns the list of valid ranges for a file.
    syntax:
      content: 'function getRangeList(options?: FileGetRangeListOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.FileGetRangeListOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/storage-file.FileGetRangeListResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.resize'
    name: 'resize(number, FileResizeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Resize file.
    syntax:
      content: 'function resize(length: number, options?: FileResizeOptions)'
      parameters:
        - id: length
          type:
            - number
          description: |-
            Resizes a file to the specified size in bytes.
                                   If the specified byte value is less than the current size of the file,
                                   then all ranges above the specified byte value are cleared.
        - id: options
          type:
            - '@azure/storage-file.FileResizeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetHTTPHeadersResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.setHTTPHeaders'
    name: 'setHTTPHeaders(FileHTTPHeaders, FileSetHTTPHeadersOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sets HTTP headers on the file.

      If no option provided, or no value provided for the file HTTP headers in
      the options,

      these file HTTP headers without a value will be cleared.
    syntax:
      content: >-
        function setHTTPHeaders(fileHTTPHeaders?: FileHTTPHeaders, options?:
        FileSetHTTPHeadersOptions)
      parameters:
        - id: fileHTTPHeaders
          type:
            - '@azure/storage-file.FileHTTPHeaders'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.FileSetHTTPHeadersOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetHTTPHeadersResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.setMetadata'
    name: 'setMetadata(Metadata, FileSetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Updates user-defined metadata for the specified file.
      If no metadata defined in the option parameter, the file
      metadata will be removed.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        FileSetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.FileSetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileSetMetadataResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.startCopyFromURL'
    name: 'startCopyFromURL(string, FileStartCopyOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Copies a blob or file to a destination file within the storage account.
    syntax:
      content: >-
        function startCopyFromURL(copySource: string, options?:
        FileStartCopyOptions)
      parameters:
        - id: copySource
          type:
            - string
          description: >-
            Specifies the URL of the source file or blob, up to 2 KB in length.

            To copy a file to another file within the same storage account, you
            may use Shared Key to

            authenticate the source file. If you are copying a file from another
            storage account, or if you

            are copying a blob from the same storage account or another storage
            account, then you must

            authenticate the source file or blob using a shared access
            signature. If the source is a public

            blob, no authentication is required to perform the copy operation. A
            file in a share snapshot

            can also be specified as a copy source.
        - id: options
          type:
            - '@azure/storage-file.FileStartCopyOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileStartCopyResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.uploadBrowserData'
    name: >-
      uploadBrowserData(Blob | ArrayBuffer | ArrayBufferView,
      UploadToAzureFileOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN BROWSERS.

      Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to an Azure
      File.
    syntax:
      content: >-
        function uploadBrowserData(browserData: Blob | ArrayBuffer |
        ArrayBufferView, options?: UploadToAzureFileOptions)
      parameters:
        - id: browserData
          type:
            - Blob | ArrayBuffer | ArrayBufferView
          description: 'Blob, File, ArrayBuffer or ArrayBufferView'
        - id: options
          type:
            - '@azure/storage-file.UploadToAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.uploadFile'
    name: 'uploadFile(string, UploadToAzureFileOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      ONLY AVAILABLE IN NODE.JS RUNTIME.
      Uploads a local file to an Azure file.
    syntax:
      content: >-
        function uploadFile(filePath: string, options?:
        UploadToAzureFileOptions)
      parameters:
        - id: filePath
          type:
            - string
          description: Full path of local file
        - id: options
          type:
            - '@azure/storage-file.UploadToAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.uploadRange'
    name: 'uploadRange(HttpRequestBody, number, number, FileUploadRangeOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Upload a range of bytes to a file. Both the start and count of the
      range must be specified. The range can be up to 4 MB in size.
    syntax:
      content: >-
        function uploadRange(body: HttpRequestBody, offset: number,
        contentLength: number, options?: FileUploadRangeOptions)
      parameters:
        - id: body
          type:
            - HttpRequestBody
          description: |-
            Blob, string, ArrayBuffer, ArrayBufferView or a function
                                          which returns a new Readable stream whose offset is from data source beginning.
        - id: offset
          type:
            - number
          description: Offset position of the destination Azure File to upload.
        - id: contentLength
          type:
            - number
          description: >-
            Length of body in bytes. Use Buffer.byteLength() to calculate body
            length for a
                                          string including non non-Base64/Hex-encoded characters.
        - id: options
          type:
            - '@azure/storage-file.FileUploadRangeOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileUploadRangeResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.uploadResetableStream'
    name: >-
      uploadResetableStream((offset: number, count?: undefined | number) =>
      ReadableStream, number, UploadToAzureFileOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Accepts a Node.js Readable stream factory, and uploads in blocks to an
      Azure File.

      The Readable stream factory must returns a Node.js Readable stream
      starting from the offset defined. The offset

      is the offset in the Azure file to be uploaded.
    syntax:
      content: >-
        function uploadResetableStream(streamFactory: (offset: number, count?:
        undefined | number) => ReadableStream, size: number, options?:
        UploadToAzureFileOptions)
      parameters:
        - id: streamFactory
          type:
            - '(offset: number, count?: undefined | number) => ReadableStream'
          description: |-
            Returns a Node.js Readable stream starting
                                                                             from the offset defined
        - id: size
          type:
            - number
          description: Size of the Azure file
        - id: options
          type:
            - '@azure/storage-file.UploadToAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.UploadSeekableBlob'
    name: >-
      UploadSeekableBlob((offset: number, size: number) => Blob, number,
      UploadToAzureFileOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN BROWSERS.

      Uploads a browser Blob object to an Azure file. Requires a blobFactory as
      the data source,

      which need to return a Blob object with the offset and size provided.
    syntax:
      content: >-
        function UploadSeekableBlob(blobFactory: (offset: number, size: number)
        => Blob, size: number, options?: UploadToAzureFileOptions)
      parameters:
        - id: blobFactory
          type:
            - '(offset: number, size: number) => Blob'
          description: ''
        - id: size
          type:
            - number
          description: ''
        - id: options
          type:
            - '@azure/storage-file.UploadToAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.uploadStream'
    name: >-
      uploadStream(Readable, number, number, number,
      UploadStreamToAzureFileOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      ONLY AVAILABLE IN NODE.JS RUNTIME.

      Uploads a Node.js Readable stream into an Azure file.

      This method will try to create an Azure, then starts uploading chunk by
      chunk.

      Size of chunk is defined by `bufferSize` parameter.

      Please make sure potential size of stream doesn't exceed file size.


      PERFORMANCE IMPROVEMENT TIPS:

      * Input stream highWaterMark is better to set a same value with bufferSize
        parameter, which will avoid Buffer.concat() operations.
    syntax:
      content: >-
        function uploadStream(stream: Readable, size: number, bufferSize:
        number, maxBuffers: number, options?: UploadStreamToAzureFileOptions)
      parameters:
        - id: stream
          type:
            - Readable
          description: Node.js Readable stream. Must be less or equal than file size.
        - id: size
          type:
            - number
          description: |-
            Size of file to be created. Maxium size allowed is 1TB.
                                 If this value is larger than stream size, there will be empty bytes in file tail.
        - id: bufferSize
          type:
            - number
          description: >-
            Size of every buffer allocated in bytes, also the chunk/range size
            during
                                       the uploaded file. Size must be > 0 and <= 4 * 1024 * 1024 (4MB)
        - id: maxBuffers
          type:
            - number
          description: |-
            Max buffers will allocate during uploading, positive correlation
                                       with max uploading concurrency
        - id: options
          type:
            - '@azure/storage-file.UploadStreamToAzureFileOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.FileClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/storage-file'
references:
  - uid: '@azure/storage-file.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file.StorageClient'
  - uid: '@azure/storage-file.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-file.Credential'
  - uid: '@azure/storage-file.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/storage-file.NewPipelineOptions'
  - uid: '@azure/storage-file.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file.Pipeline'
  - uid: '@azure/storage-file.UploadToAzureFileOptions'
    name: UploadToAzureFileOptions
    spec.typeScript:
      - name: UploadToAzureFileOptions
        fullName: UploadToAzureFileOptions
        uid: '@azure/storage-file.UploadToAzureFileOptions'
  - uid: '@azure/storage-file.FileAbortCopyFromURLOptions'
    name: FileAbortCopyFromURLOptions
    spec.typeScript:
      - name: FileAbortCopyFromURLOptions
        fullName: FileAbortCopyFromURLOptions
        uid: '@azure/storage-file.FileAbortCopyFromURLOptions'
  - uid: '@azure/storage-file.FileClearRangeOptions'
    name: FileClearRangeOptions
    spec.typeScript:
      - name: FileClearRangeOptions
        fullName: FileClearRangeOptions
        uid: '@azure/storage-file.FileClearRangeOptions'
  - uid: '@azure/storage-file.FileCreateOptions'
    name: FileCreateOptions
    spec.typeScript:
      - name: FileCreateOptions
        fullName: FileCreateOptions
        uid: '@azure/storage-file.FileCreateOptions'
  - uid: '@azure/storage-file.FileDeleteOptions'
    name: FileDeleteOptions
    spec.typeScript:
      - name: FileDeleteOptions
        fullName: FileDeleteOptions
        uid: '@azure/storage-file.FileDeleteOptions'
  - uid: '@azure/storage-file.FileDownloadOptions'
    name: FileDownloadOptions
    spec.typeScript:
      - name: FileDownloadOptions
        fullName: FileDownloadOptions
        uid: '@azure/storage-file.FileDownloadOptions'
  - uid: '@azure/storage-file.DownloadFromAzureFileOptions'
    name: DownloadFromAzureFileOptions
    spec.typeScript:
      - name: DownloadFromAzureFileOptions
        fullName: DownloadFromAzureFileOptions
        uid: '@azure/storage-file.DownloadFromAzureFileOptions'
  - uid: '@azure/storage-file.FileGetPropertiesOptions'
    name: FileGetPropertiesOptions
    spec.typeScript:
      - name: FileGetPropertiesOptions
        fullName: FileGetPropertiesOptions
        uid: '@azure/storage-file.FileGetPropertiesOptions'
  - uid: '@azure/storage-file.FileGetRangeListOptions'
    name: FileGetRangeListOptions
    spec.typeScript:
      - name: FileGetRangeListOptions
        fullName: FileGetRangeListOptions
        uid: '@azure/storage-file.FileGetRangeListOptions'
  - uid: Promise<@azure/storage-file.FileGetRangeListResponse>
    name: FileGetRangeListResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileGetRangeListResponse
        fullName: FileGetRangeListResponse
        uid: '@azure/storage-file.FileGetRangeListResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/storage-file.FileResizeOptions'
    name: FileResizeOptions
    spec.typeScript:
      - name: FileResizeOptions
        fullName: FileResizeOptions
        uid: '@azure/storage-file.FileResizeOptions'
  - uid: '@azure/storage-file.FileHTTPHeaders'
    name: FileHTTPHeaders
    spec.typeScript:
      - name: FileHTTPHeaders
        fullName: FileHTTPHeaders
        uid: '@azure/storage-file.FileHTTPHeaders'
  - uid: '@azure/storage-file.FileSetHTTPHeadersOptions'
    name: FileSetHTTPHeadersOptions
    spec.typeScript:
      - name: FileSetHTTPHeadersOptions
        fullName: FileSetHTTPHeadersOptions
        uid: '@azure/storage-file.FileSetHTTPHeadersOptions'
  - uid: '@azure/storage-file.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file.Metadata'
  - uid: '@azure/storage-file.FileSetMetadataOptions'
    name: FileSetMetadataOptions
    spec.typeScript:
      - name: FileSetMetadataOptions
        fullName: FileSetMetadataOptions
        uid: '@azure/storage-file.FileSetMetadataOptions'
  - uid: '@azure/storage-file.FileStartCopyOptions'
    name: FileStartCopyOptions
    spec.typeScript:
      - name: FileStartCopyOptions
        fullName: FileStartCopyOptions
        uid: '@azure/storage-file.FileStartCopyOptions'
  - uid: '@azure/storage-file.FileUploadRangeOptions'
    name: FileUploadRangeOptions
    spec.typeScript:
      - name: FileUploadRangeOptions
        fullName: FileUploadRangeOptions
        uid: '@azure/storage-file.FileUploadRangeOptions'
  - uid: '@azure/storage-file.UploadStreamToAzureFileOptions'
    name: UploadStreamToAzureFileOptions
    spec.typeScript:
      - name: UploadStreamToAzureFileOptions
        fullName: UploadStreamToAzureFileOptions
        uid: '@azure/storage-file.UploadStreamToAzureFileOptions'

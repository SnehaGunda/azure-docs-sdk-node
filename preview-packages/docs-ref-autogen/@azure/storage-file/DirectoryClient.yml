### YamlMime:UniversalReference
items:
  - uid: '@azure/storage-file.DirectoryClient'
    name: DirectoryClient
    fullName: DirectoryClient
    children:
      - '@azure/storage-file.DirectoryClient.create'
      - '@azure/storage-file.DirectoryClient.createFile'
      - '@azure/storage-file.DirectoryClient.createSubdirectory'
      - '@azure/storage-file.DirectoryClient.delete'
      - '@azure/storage-file.DirectoryClient.deleteFile'
      - '@azure/storage-file.DirectoryClient.deleteSubdirectory'
      - '@azure/storage-file.DirectoryClient.constructor'
      - '@azure/storage-file.DirectoryClient.constructor_1'
      - '@azure/storage-file.DirectoryClient.getDirectoryClient'
      - '@azure/storage-file.DirectoryClient.getFileClient'
      - '@azure/storage-file.DirectoryClient.getProperties'
      - '@azure/storage-file.DirectoryClient.listFilesAndDirectories'
      - '@azure/storage-file.DirectoryClient.setMetadata'
      - '@azure/storage-file.DirectoryClient.url'
    langs:
      - typeScript
    type: class
    summary: >-
      A DirectoryClient represents a URL to the Azure Storage directory allowing
      you to manipulate its files and directories.
    extends:
      name: '@azure/storage-file.StorageClient'
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.create'
    name: create(DirectoryCreateOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new directory under the specified share or parent directory.
    syntax:
      content: 'function create(options?: DirectoryCreateOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryCreateResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.createFile'
    name: 'createFile(string, number, FileCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Creates a new file or replaces a file under this directory. Note it only
      initializes the file with no content.
    syntax:
      content: >-
        function createFile(fileName: string, size: number, options?:
        FileCreateOptions)
      parameters:
        - id: fileName
          type:
            - string
          description: ''
        - id: size
          type:
            - number
          description: 'Specifies the maximum size in bytes for the file, up to 1 TB.'
        - id: options
          type:
            - '@azure/storage-file.FileCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Object>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.createSubdirectory'
    name: 'createSubdirectory(string, DirectoryCreateOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a new subdirectory under this directory.
    syntax:
      content: >-
        function createSubdirectory(directoryName: string, options?:
        DirectoryCreateOptions)
      parameters:
        - id: directoryName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-file.DirectoryCreateOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Object>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.delete'
    name: delete(DirectoryDeleteOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Removes the specified empty directory. Note that the directory must be
      empty before it can be

      deleted.
    syntax:
      content: 'function delete(options?: DirectoryDeleteOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.deleteFile'
    name: 'deleteFile(string, FileDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Removes the specified file under this directory from the storage account.

      When a file is successfully deleted, it is immediately removed from the
      storage

      account's index and is no longer accessible to clients. The file's data is
      later

      removed from the service during garbage collection.

      Delete File will fail with status code 409 (Conflict) and error code
      SharingViolation

      if the file is open on an SMB client.


      Delete File is not supported on a share snapshot, which is a read-only
      copy of

      a share. An attempt to perform this operation on a share snapshot will
      fail with 400 (InvalidQueryParameterValue)
    syntax:
      content: 'function deleteFile(fileName: string, options?: FileDeleteOptions)'
      parameters:
        - id: fileName
          type:
            - string
          description: Name of the file to delete
        - id: options
          type:
            - '@azure/storage-file.FileDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FileDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.deleteSubdirectory'
    name: 'deleteSubdirectory(string, DirectoryDeleteOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Removes the specified empty sub directory under this directory.
      Note that the directory must be empty before it can be deleted.
    syntax:
      content: >-
        function deleteSubdirectory(directoryName: string, options?:
        DirectoryDeleteOptions)
      parameters:
        - id: directoryName
          type:
            - string
          description: ''
        - id: options
          type:
            - '@azure/storage-file.DirectoryDeleteOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryDeleteResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.constructor'
    name: 'DirectoryClient(string, Credential, NewPipelineOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DirectoryClient.
    syntax:
      content: >-
        new DirectoryClient(url: string, credential?: Credential, options?:
        NewPipelineOptions)
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: credential
          type:
            - '@azure/storage-file.Credential'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.NewPipelineOptions'
          description: ''
          optional: true
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.constructor_1'
    name: 'DirectoryClient(string, Pipeline)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creates an instance of DirectoryClient.
    syntax:
      content: 'new DirectoryClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type:
            - string
          description: |-
            A URL string pointing to Azure Storage file directory, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory". You can
                                append a SAS if using AnonymousCredential, such as
                                "https://myaccount.file.core.windows.net/myshare/mydirectory?sasString".
                                This method accepts an encoded URL or non-encoded URL pointing to a directory.
                                Encoded URL string will NOT be escaped twice, only special characters in URL path will be escaped.
                                However, if a directory name includes %, directory name must be encoded in the URL.
                                Such as a directory named "mydir%", the URL should be "https://myaccount.file.core.windows.net/myshare/mydir%25".
        - id: pipeline
          type:
            - '@azure/storage-file.Pipeline'
          description: |-
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.getDirectoryClient'
    name: getDirectoryClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a DirectoryClient object for a sub directory.
    syntax:
      content: 'function getDirectoryClient(subDirectoryName: string)'
      parameters:
        - id: subDirectoryName
          type:
            - string
          description: A subdirectory name
      return:
        type:
          - '@azure/storage-file.DirectoryClient'
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.getFileClient'
    name: getFileClient(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a FileClient object.
    syntax:
      content: 'function getFileClient(fileName: string)'
      parameters:
        - id: fileName
          type:
            - string
          description: A file name.
      return:
        type:
          - '@azure/storage-file.FileClient'
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.getProperties'
    name: getProperties(DirectoryGetPropertiesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns all system properties for the specified directory, and can also be
      used to check the

      existence of a directory. The data returned does not include the files in
      the directory or any

      subdirectories.
    syntax:
      content: 'function getProperties(options?: DirectoryGetPropertiesOptions)'
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryGetPropertiesOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectoryGetPropertiesResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.listFilesAndDirectories'
    name: listFilesAndDirectories(DirectoryListFilesAndDirectoriesOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Returns an async iterable iterator to list all the files and directories

      under the specified account.

      .byPage() returns an async iterable iterator to list the files and
      directories in pages.
    syntax:
      content: >-
        function listFilesAndDirectories(options?:
        DirectoryListFilesAndDirectoriesOptions)
      parameters:
        - id: options
          type:
            - '@azure/storage-file.DirectoryListFilesAndDirectoriesOptions'
          description: ''
          optional: true
      return:
        type:
          - >-
            PagedAsyncIterableIterator<Object & @azure/storage-file.FileItem |
            Object & @azure/storage-file.DirectoryItem,
            Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.setMetadata'
    name: 'setMetadata(Metadata, DirectorySetMetadataOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Updates user defined metadata for the specified directory.
    syntax:
      content: >-
        function setMetadata(metadata?: Metadata, options?:
        DirectorySetMetadataOptions)
      parameters:
        - id: metadata
          type:
            - '@azure/storage-file.Metadata'
          description: ''
          optional: true
        - id: options
          type:
            - '@azure/storage-file.DirectorySetMetadataOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.DirectorySetMetadataResponse>
    package: '@azure/storage-file'
  - uid: '@azure/storage-file.DirectoryClient.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: URL string value.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/storage-file'
references:
  - uid: '@azure/storage-file.StorageClient'
    name: StorageClient
    spec.typeScript:
      - name: StorageClient
        fullName: StorageClient
        uid: '@azure/storage-file.StorageClient'
  - uid: '@azure/storage-file.Credential'
    name: Credential
    spec.typeScript:
      - name: Credential
        fullName: Credential
        uid: '@azure/storage-file.Credential'
  - uid: '@azure/storage-file.NewPipelineOptions'
    name: NewPipelineOptions
    spec.typeScript:
      - name: NewPipelineOptions
        fullName: NewPipelineOptions
        uid: '@azure/storage-file.NewPipelineOptions'
  - uid: '@azure/storage-file.Pipeline'
    name: Pipeline
    spec.typeScript:
      - name: Pipeline
        fullName: Pipeline
        uid: '@azure/storage-file.Pipeline'
  - uid: '@azure/storage-file.DirectoryCreateOptions'
    name: DirectoryCreateOptions
    spec.typeScript:
      - name: DirectoryCreateOptions
        fullName: DirectoryCreateOptions
        uid: '@azure/storage-file.DirectoryCreateOptions'
  - uid: '@azure/storage-file.FileCreateOptions'
    name: FileCreateOptions
    spec.typeScript:
      - name: FileCreateOptions
        fullName: FileCreateOptions
        uid: '@azure/storage-file.FileCreateOptions'
  - uid: '@azure/storage-file.DirectoryDeleteOptions'
    name: DirectoryDeleteOptions
    spec.typeScript:
      - name: DirectoryDeleteOptions
        fullName: DirectoryDeleteOptions
        uid: '@azure/storage-file.DirectoryDeleteOptions'
  - uid: '@azure/storage-file.FileDeleteOptions'
    name: FileDeleteOptions
    spec.typeScript:
      - name: FileDeleteOptions
        fullName: FileDeleteOptions
        uid: '@azure/storage-file.FileDeleteOptions'
  - uid: '@azure/storage-file.DirectoryClient'
    name: DirectoryClient
    spec.typeScript:
      - name: DirectoryClient
        fullName: DirectoryClient
        uid: '@azure/storage-file.DirectoryClient'
  - uid: '@azure/storage-file.FileClient'
    name: FileClient
    spec.typeScript:
      - name: FileClient
        fullName: FileClient
        uid: '@azure/storage-file.FileClient'
  - uid: '@azure/storage-file.DirectoryGetPropertiesOptions'
    name: DirectoryGetPropertiesOptions
    spec.typeScript:
      - name: DirectoryGetPropertiesOptions
        fullName: DirectoryGetPropertiesOptions
        uid: '@azure/storage-file.DirectoryGetPropertiesOptions'
  - uid: '@azure/storage-file.DirectoryListFilesAndDirectoriesOptions'
    name: DirectoryListFilesAndDirectoriesOptions
    spec.typeScript:
      - name: DirectoryListFilesAndDirectoriesOptions
        fullName: DirectoryListFilesAndDirectoriesOptions
        uid: '@azure/storage-file.DirectoryListFilesAndDirectoriesOptions'
  - uid: >-
      PagedAsyncIterableIterator<Object & @azure/storage-file.FileItem | Object
      & @azure/storage-file.DirectoryItem,
      Models.DirectoryListFilesAndDirectoriesSegmentResponse>
    name: DirectoryListFilesAndDirectoriesSegmentResponse>
    spec.typeScript:
      - name: 'PagedAsyncIterableIterator<Object & '
        fullName: 'PagedAsyncIterableIterator<Object & '
      - name: FileItem
        fullName: FileItem
        uid: '@azure/storage-file.FileItem'
      - name: ' | Object & '
        fullName: ' | Object & '
      - name: DirectoryItem
        fullName: DirectoryItem
        uid: '@azure/storage-file.DirectoryItem'
      - name: ', Models.DirectoryListFilesAndDirectoriesSegmentResponse>'
        fullName: ', Models.DirectoryListFilesAndDirectoriesSegmentResponse>'
  - uid: '@azure/storage-file.Metadata'
    name: Metadata
    spec.typeScript:
      - name: Metadata
        fullName: Metadata
        uid: '@azure/storage-file.Metadata'
  - uid: '@azure/storage-file.DirectorySetMetadataOptions'
    name: DirectorySetMetadataOptions
    spec.typeScript:
      - name: DirectorySetMetadataOptions
        fullName: DirectorySetMetadataOptions
        uid: '@azure/storage-file.DirectorySetMetadataOptions'

### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.FeedOptions'
    name: FeedOptions
    fullName: FeedOptions
    children:
      - '@azure/cosmos.FeedOptions.abortSignal'
      - '@azure/cosmos.FeedOptions.accessCondition'
      - '@azure/cosmos.FeedOptions.bufferItems'
      - '@azure/cosmos.FeedOptions.continuation'
      - '@azure/cosmos.FeedOptions.continuationTokenLimitInKB'
      - '@azure/cosmos.FeedOptions.enableScanInQuery'
      - '@azure/cosmos.FeedOptions.forceQueryPlan'
      - '@azure/cosmos.FeedOptions.initialHeaders'
      - '@azure/cosmos.FeedOptions.maxDegreeOfParallelism'
      - '@azure/cosmos.FeedOptions.maxItemCount'
      - '@azure/cosmos.FeedOptions.populateQueryMetrics'
      - '@azure/cosmos.FeedOptions.sessionToken'
      - '@azure/cosmos.FeedOptions.useIncrementalFeed'
    langs:
      - typeScript
    type: interface
    summary: The feed options and query methods.
    extends:
      name: '@azure/cosmos.SharedOptions'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.abortSignal'
    name: abortSignal
    fullName: abortSignal
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      abortSignal to pass to all underlying network requests created by this
      method call. See
      https://developer.mozilla.org/en-US/docs/Web/API/AbortController
    optional: true
    syntax:
      content: 'abortSignal?: AbortSignal'
      return:
        type:
          - AbortSignal
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.accessCondition'
    name: accessCondition
    fullName: accessCondition
    children: []
    langs:
      - typeScript
    type: property
    summary: Conditions Associated with the request.
    optional: true
    syntax:
      content: 'accessCondition?: Object'
      return:
        type:
          - Object
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.bufferItems'
    name: bufferItems
    fullName: bufferItems
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Enable buffering additional items during queries. Default: false

      This will buffer an additional page at a time (multiplied by
      maxDegreeOfParallelism) from the server in the background.

      This improves latency by fetching pages before they are needed by the
      client. If you're draining all of the results from the

      server, like `.fetchAll`, you should usually enable this. If you're only
      fetching one page at a time via continuation token,

      you should avoid this. If you're draining more than one page, but not the
      entire result set, it may help improve latency, but

      it will increase the total amount of RU/s use to serve the entire query
      (as some pages will be fetched more than once).
    optional: true
    syntax:
      content: 'bufferItems?: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.continuation'
    name: continuation
    fullName: continuation
    children: []
    langs:
      - typeScript
    type: property
    summary: 'Opaque token for continuing the enumeration. Default: undefined'
    optional: true
    syntax:
      content: 'continuation?: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.continuationTokenLimitInKB'
    name: continuationTokenLimitInKB
    fullName: continuationTokenLimitInKB
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Limits the size of the continuation token in the response. Default:
      undefined

      Continuation Tokens contain optional data that can be removed from the
      serialization before writing it out to a header.

      By default we are capping this to 1kb to avoid long headers (Node.js has a
      global header size limit).

      A user may set this field to allow for longer headers, which can help the
      backend optimize query execution."
    optional: true
    syntax:
      content: 'continuationTokenLimitInKB?: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.enableScanInQuery'
    name: enableScanInQuery
    fullName: enableScanInQuery
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Allow scan on the queries which couldn't be served as indexing was opted
      out on the requested paths. Default: false

      In general, it is best to avoid using this setting. Scans are relatively
      expensive and take a long time to serve.
    optional: true
    syntax:
      content: 'enableScanInQuery?: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.forceQueryPlan'
    name: forceQueryPlan
    fullName: forceQueryPlan
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      This setting forces the query to use a query plan. Default: false

      Note: this will disable continuation token support, even for single
      partition queries.


      For queries like aggregates and most cross partition queries, this happens
      anyway.

      However, since the library doesn't know what type of query it is until we
      get back the first response,

      some optimization can't happen until later.


      If this setting is enabled, it will force query plan for the query, which
      will save some network requests

      and ensure parallelism can happen. Useful for when you know you're doing
      cross-partition or aggregate queries.
    optional: true
    syntax:
      content: 'forceQueryPlan?: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.initialHeaders'
    name: initialHeaders
    fullName: initialHeaders
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      (Advanced use case) Initial headers to start with when sending requests to
      Cosmos
    optional: true
    syntax:
      content: 'initialHeaders?: CosmosHeaders'
      return:
        type:
          - '@azure/cosmos.CosmosHeaders'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.maxDegreeOfParallelism'
    name: maxDegreeOfParallelism
    fullName: maxDegreeOfParallelism
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      The maximum number of concurrent operations that run client side during
      parallel query execution in the

      Azure Cosmos DB database service. Negative values make the system
      automatically decides the number of

      concurrent operations to run. Default: 0 (no parallelism)
    optional: true
    syntax:
      content: 'maxDegreeOfParallelism?: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.maxItemCount'
    name: maxItemCount
    fullName: maxItemCount
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Max number of items to be returned in the enumeration operation. Default:
      undefined (server will defined payload)

      Expirimenting with this value can usually result in the biggest
      performance changes to the query.


      The smaller the item count, the faster the first result will be delivered
      (for non-aggregates). For larger amounts,

      it will take longer to serve the request, but you'll usually get better
      throughput for large queries (i.e. if you need 1000 items

      before you can do any other actions, set `maxItemCount` to 1000. If you
      can start doing work after the first 100, set `maxItemCount` to 100.)
    optional: true
    syntax:
      content: 'maxItemCount?: number'
      return:
        type:
          - number
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.populateQueryMetrics'
    name: populateQueryMetrics
    fullName: populateQueryMetrics
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Enable returning query metrics in response headers. Default: false

      Used for debugging slow or expensive queries. Also increases response size
      and if you're using a low max header size in Node.js,

      you can run into issues faster.
    optional: true
    syntax:
      content: 'populateQueryMetrics?: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.sessionToken'
    name: sessionToken
    fullName: sessionToken
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Enables/disables getting document container quota related stats for
      document container read requests.
    optional: true
    syntax:
      content: 'sessionToken?: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.FeedOptions.useIncrementalFeed'
    name: useIncrementalFeed
    fullName: useIncrementalFeed
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Note: consider using readChangeFeed instead.

      Indicates a change feed request. Must be set to "Incremental feed", or
      omitted otherwise. Default: false
    optional: true
    syntax:
      content: 'useIncrementalFeed?: boolean'
      return:
        type:
          - boolean
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.SharedOptions'
    name: SharedOptions
    spec.typeScript:
      - name: SharedOptions
        fullName: SharedOptions
        uid: '@azure/cosmos.SharedOptions'
  - uid: '@azure/cosmos.CosmosHeaders'
    name: CosmosHeaders
    spec.typeScript:
      - name: CosmosHeaders
        fullName: CosmosHeaders
        uid: '@azure/cosmos.CosmosHeaders'
